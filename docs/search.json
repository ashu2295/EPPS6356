[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EPPS6356",
    "section": "",
    "text": "# Website for posting the assignments for the\n# Fall 2023 class: EPPS 6356 - Data Visualization taught by Karl Ho."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Assignment 1.html",
    "href": "Assignment 1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "QUESTION 1\n\n## Anscombe (1973) Quartlet\n\ndata(anscombe)  # Load Anscombe's data\n#View(anscombe) # View the data\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n## Simple version\nplot(anscombe$x1,anscombe$y1)\nsummary(anscombe)\n\n       x1             x2             x3             x4           y1        \n Min.   : 4.0   Min.   : 4.0   Min.   : 4.0   Min.   : 8   Min.   : 4.260  \n 1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 6.5   1st Qu.: 8   1st Qu.: 6.315  \n Median : 9.0   Median : 9.0   Median : 9.0   Median : 8   Median : 7.580  \n Mean   : 9.0   Mean   : 9.0   Mean   : 9.0   Mean   : 9   Mean   : 7.501  \n 3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.:11.5   3rd Qu.: 8   3rd Qu.: 8.570  \n Max.   :14.0   Max.   :14.0   Max.   :14.0   Max.   :19   Max.   :10.840  \n       y2              y3              y4        \n Min.   :3.100   Min.   : 5.39   Min.   : 5.250  \n 1st Qu.:6.695   1st Qu.: 6.25   1st Qu.: 6.170  \n Median :8.140   Median : 7.11   Median : 7.040  \n Mean   :7.501   Mean   : 7.50   Mean   : 7.501  \n 3rd Qu.:8.950   3rd Qu.: 7.98   3rd Qu.: 8.190  \n Max.   :9.260   Max.   :12.74   Max.   :12.500  \n\n# Create four model objects\nlm1 &lt;- lm(y1 ~ x1, data=anscombe)\nsummary(lm1)\n\n\nCall:\nlm(formula = y1 ~ x1, data = anscombe)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.92127 -0.45577 -0.04136  0.70941  1.83882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0001     1.1247   2.667  0.02573 * \nx1            0.5001     0.1179   4.241  0.00217 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6665,    Adjusted R-squared:  0.6295 \nF-statistic: 17.99 on 1 and 9 DF,  p-value: 0.00217\n\nlm2 &lt;- lm(y2 ~ x2, data=anscombe)\nsummary(lm2)\n\n\nCall:\nlm(formula = y2 ~ x2, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9009 -0.7609  0.1291  0.9491  1.2691 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)    3.001      1.125   2.667  0.02576 * \nx2             0.500      0.118   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.237 on 9 degrees of freedom\nMultiple R-squared:  0.6662,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002179\n\nlm3 &lt;- lm(y3 ~ x3, data=anscombe)\nsummary(lm3)\n\n\nCall:\nlm(formula = y3 ~ x3, data = anscombe)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.1586 -0.6146 -0.2303  0.1540  3.2411 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0025     1.1245   2.670  0.02562 * \nx3            0.4997     0.1179   4.239  0.00218 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6663,    Adjusted R-squared:  0.6292 \nF-statistic: 17.97 on 1 and 9 DF,  p-value: 0.002176\n\nlm4 &lt;- lm(y4 ~ x4, data=anscombe)\nsummary(lm4)\n\n\nCall:\nlm(formula = y4 ~ x4, data = anscombe)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-1.751 -0.831  0.000  0.809  1.839 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)   \n(Intercept)   3.0017     1.1239   2.671  0.02559 * \nx4            0.4999     0.1178   4.243  0.00216 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.236 on 9 degrees of freedom\nMultiple R-squared:  0.6667,    Adjusted R-squared:  0.6297 \nF-statistic:    18 on 1 and 9 DF,  p-value: 0.002165\n\nplot(anscombe$x1,anscombe$y1)\nabline(coefficients(lm1))\n\n\n\nplot(anscombe$x2,anscombe$y2)\nabline(coefficients(lm2))\n\n\n\nplot(anscombe$x3,anscombe$y3)\nabline(coefficients(lm3))\n\n\n\nplot(anscombe$x4,anscombe$y4)\nabline(coefficients(lm4))\n\n\n\n## Fancy version (per help file)\n\nff &lt;- y ~ x\nmods &lt;- setNames(as.list(1:4), paste0(\"lm\", 1:4))\n\n# Plot using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  ## or   ff[[2]] &lt;- as.name(paste0(\"y\", i))\n  ##      ff[[3]] &lt;- as.name(paste0(\"x\", i))\n  mods[[i]] &lt;- lmi &lt;- lm(ff, data = anscombe)\n  print(anova(lmi))\n}\n\nAnalysis of Variance Table\n\nResponse: y1\n          Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nx1         1 27.510 27.5100   17.99 0.00217 **\nResiduals  9 13.763  1.5292                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y2\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx2         1 27.500 27.5000  17.966 0.002179 **\nResiduals  9 13.776  1.5307                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y3\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx3         1 27.470 27.4700  17.972 0.002176 **\nResiduals  9 13.756  1.5285                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nAnalysis of Variance Table\n\nResponse: y4\n          Df Sum Sq Mean Sq F value   Pr(&gt;F)   \nx4         1 27.490 27.4900  18.003 0.002165 **\nResiduals  9 13.742  1.5269                    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsapply(mods, coef)  # Note the use of this function\n\n                  lm1      lm2       lm3       lm4\n(Intercept) 3.0000909 3.000909 3.0024545 3.0017273\nx1          0.5000909 0.500000 0.4997273 0.4999091\n\nlapply(mods, function(fm) coef(summary(fm)))\n\n$lm1\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0000909  1.1247468 2.667348 0.025734051\nx1          0.5000909  0.1179055 4.241455 0.002169629\n\n$lm2\n            Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.000909  1.1253024 2.666758 0.025758941\nx2          0.500000  0.1179637 4.238590 0.002178816\n\n$lm3\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0024545  1.1244812 2.670080 0.025619109\nx3          0.4997273  0.1178777 4.239372 0.002176305\n\n$lm4\n             Estimate Std. Error  t value    Pr(&gt;|t|)\n(Intercept) 3.0017273  1.1239211 2.670763 0.025590425\nx4          0.4999091  0.1178189 4.243028 0.002164602\n\n# Preparing for the plots\nop &lt;- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))\n\n# Plot charts using for loop\nfor(i in 1:4) {\n  ff[2:3] &lt;- lapply(paste0(c(\"y\",\"x\"), i), as.name)\n  plot(ff, data = anscombe, col = \"red\", pch = 21, bg = \"orange\", cex = 1.2,\n       xlim = c(3, 19), ylim = c(3, 13))\n  abline(mods[[i]], col = \"blue\")\n}\nmtext(\"Anscombe's 4 Regression data sets\", outer = TRUE, cex = 1.5)\n\n\n\npar(op)\n\n________________________________________________________________________________________________________________\nQUESTION 2\n\n\n\nGenerative Art - A\n\n\n\n\n\nGenerative Art - B\n\n\n________________________________________________________________________________________________________________\nQUESTION 3\n\n# Title Fall color\n# Credit: https://fronkonstin.com\n\n# Install packages\n\n#install.packages(\"gsubfn\")\n#install.packages(\"tidyverse\")\nlibrary(gsubfn)\n\nLoading required package: proto\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Define elements in plant art\n# Each image corresponds to a different axiom, rules, angle and depth\n\n# Leaf of Fall\n\naxiom=\"X\"\nrules=list(\"X\"=\"F-[[X]+X]+F[+FX]-X\", \"F\"=\"FF\")\nangle=22.5\ndepth=6\n\n\nfor (i in 1:depth) axiom=gsubfn(\".\", rules, axiom)\n\nactions=str_extract_all(axiom, \"\\\\d*\\\\+|\\\\d*\\\\-|F|L|R|\\\\[|\\\\]|\\\\|\") %&gt;% unlist\n\nstatus=data.frame(x=numeric(0), y=numeric(0), alfa=numeric(0))\npoints=data.frame(x1 = 0, y1 = 0, x2 = NA, y2 = NA, alfa=90, depth=1)\n\n\n# Generating data\n# Note: may take a minute or two\n\nfor (action in actions)\n{\n  if (action==\"F\")\n  {\n    x=points[1, \"x1\"]+cos(points[1, \"alfa\"]*(pi/180))\n    y=points[1, \"y1\"]+sin(points[1, \"alfa\"]*(pi/180))\n    points[1,\"x2\"]=x\n    points[1,\"y2\"]=y\n    data.frame(x1 = x, y1 = y, x2 = NA, y2 = NA,\n               alfa=points[1, \"alfa\"],\n               depth=points[1,\"depth\"]) %&gt;% rbind(points)-&gt;points\n  }\n  if (action %in% c(\"+\", \"-\")){\n    alfa=points[1, \"alfa\"]\n    points[1, \"alfa\"]=eval(parse(text=paste0(\"alfa\",action, angle)))\n  }\n  if(action==\"[\"){\n    data.frame(x=points[1, \"x1\"], y=points[1, \"y1\"], alfa=points[1, \"alfa\"]) %&gt;%\n      rbind(status) -&gt; status\n    points[1, \"depth\"]=points[1, \"depth\"]+1\n  }\n\n  if(action==\"]\"){\n    depth=points[1, \"depth\"]\n    points[-1,]-&gt;points\n    data.frame(x1=status[1, \"x\"], y1=status[1, \"y\"], x2=NA, y2=NA,\n               alfa=status[1, \"alfa\"],\n               depth=depth-1) %&gt;%\n      rbind(points) -&gt; points\n    status[-1,]-&gt;status\n  }\n}\n\nggplot() +\n  geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2),\n               lineend = \"round\",\n               color=\"blueviolet\", # Set your own Fall color?\n               data=na.omit(points)) +\n  coord_fixed(ratio = 1) +\n  theme_void() # No grid nor axes\n\n\n\n\n________________________________________________________________________________________________________________\nQUESTION 4\n\n# This chart can be obtained from the website https://www.tylervigen.com/spurious-correlations.\n\n# It is an example of spurious correlation. It is a line chart with 2 y-axis.\n# Data on the x-axis represents the bedsheet tanglings for that particular year.\n# Data on the left y-axis is the year round data of the total amount of pounds of \n# cheese consumption. The number on the right y-axis is the number of deaths.\n# Data on x-axis is from the year 2000-2009. Cheese consumption is red in color. \n# Bedsheet Tanglings is black in color. Highest deaths happened in the Year 2009. \n# Highest Cheese Consumption happened in # the Year 2008 and it was north of 33lbs\n# It's quite evident that cheese  consumption has one-to-one relation with the \n# deaths happened by bedsheet tangling. So next time when you are munching on \n# cheese, keep this trivia in mind.\n\n\n\n\n\n\nCheese Consumption leads to death by getting tangled in the bedsheet"
  },
  {
    "objectID": "Hackathon.html",
    "href": "Hackathon.html",
    "title": "Hackathon",
    "section": "",
    "text": "library(ggplot2)\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Small Apples\", \"Medium Apples\", \"Large Apples\", \"Small Oranges\", \"Large Oranges\"),\n  Quantity = c(10, 15, 20, 8, 25),\n  Width = c(0.3, 0.5, 0.7, 0.3, 0.7)  # Specify the widths for each bar\n)\n\nchart1 &lt;- ggplot(sales_data, aes(x = Fruit, y = Quantity, width = Width)) +\n  geom_bar(stat = \"identity\", fill = \"coral\") +\n  labs(title = \"Sales for Fruits of Different Sizes\", x = \"Fruit\", y = \"Quantity Sold\") +\n  theme(text=element_text(size=12,  family=\"serif\"), plot.title = element_text(hjust = 0.5))\n  \nprint(chart1)\n\n\n\n\n\nlibrary(gridExtra)\ndata1 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(5000, 7000, 6500, 3000)\n)\n\ndata2 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(2000, 5000, 6000, 1000)\n)\n\nstore1 &lt;- ggplot(data1, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"midnightblue\", alpha = 0.7) +\n  labs(title = \"Store 1: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nstore2 &lt;- ggplot(data2, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"seagreen4\", alpha = 0.7) +\n  labs(title = \"Store 2: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\ncombined_chart &lt;- grid.arrange(store1, store2, ncol = 2)\n\n\n\n\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Apples\", \"Oranges\", \"Pears\", \"Kiwis\", \"Bananas\", \"Pineapples\", \"Peaches\"),\n  Quantity = c(10, 15, 20, 8, 25, 12, 18)\n)\n\nchart3 &lt;- ggplot(sales_data, aes(x = Quantity, y = Fruit)) +\n  geom_bar(stat = \"identity\", fill = \"darkslategray4\") +\n  labs(title = \"Sales for Different Fruits\", x = \"Quantity Sold\", y = \"Type of Fruit\") + \n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nprint(chart3)\n\n\n\n\n\nhobbies &lt;- c(\"Baking\", \"Drawing\", \"Reading\")\ndata1 &lt;- c(20, 30, 15)\ndata2 &lt;- c(25, 15, 10)\ndata3 &lt;- c(15, 10, 13)\n\ndata_matrix &lt;- matrix(c(data1, data2, data3), nrow = length(hobbies), byrow = TRUE)\n\nbar_colors &lt;- c(\"firebrick\", \"navajowhite3\", \"darkolivegreen\")\nbar_labels &lt;- c(\"Yes\", \"No\", \"Maybe\")\n\nbarplot(data_matrix, beside = TRUE, col = bar_colors, names.arg = hobbies, main = \"Survey Reponses to Hobby Interests\", xlab = \"Hobby Categories\", ylab = \"Total Number of Reponses\", family=\"serif\")\n\nlegend(\"topright\", legend = bar_labels, fill = bar_colors)"
  },
  {
    "objectID": "Assignment 5.html",
    "href": "Assignment 5.html",
    "title": "Assignment 5",
    "section": "",
    "text": "# Create a sample dataset\ndata &lt;- rnorm(100)\n\n# Create a histogram\nhist(data, main=\"Histogram\", xlab=\"Value\", ylab=\"Frequency\", col=\"lightblue\", border=\"black\")\n\n\n\n\n\n# Create a sample dataset\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\")\nvalues &lt;- c(30, 45, 60)\n\n# Create a bar chart\nbarplot(values, names.arg=categories, main=\"Bar Chart\", horiz = TRUE, xlab=\"Category\", ylab=\"Value\", col=\"lightblue\")\n\n\n\n\n\n# Create a sample dataset\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\")\nvalues &lt;- c(30, 45, 60)\n\n# Create a horizontal bar chart\nbarplot(values, names.arg=categories, main=\"Horizontal Bar Chart\", xlab=\"Value\", ylab=\"Category\", col=\"lightblue\")\n\n\n\n\n\n# Create a sample dataset\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\")\nvalues &lt;- c(30, 45, 60)\n\n# Create a pie chart\npie(values, labels=categories, main=\"Pie Chart\", col=c(\"lightblue\", \"lightgreen\", \"lightcoral\"))\n\n\n\n\n\n# Create a sample dataset\ndata &lt;- list(a=rnorm(100), b=rnorm(100, mean=2), c=rnorm(100, mean=3))\n\n# Create a box plot\nboxplot(data, main=\"Box Plot\", xlab=\"Group\", ylab=\"Value\", col=c(\"lightblue\", \"lightgreen\", \"lightcoral\"))\n\n\n\n\n\n# Create a sample dataset\nx &lt;- rnorm(50)\ny &lt;- rnorm(50)\n\n# Create a scatter plot\nplot(x, y, main=\"Scatter Plot\", xlab=\"X-axis\", ylab=\"Y-axis\", col=\"blue\", pch=19)\n\n\n\n\n\nlibrary(ggplot2)\n\n# Create a sample dataset\ndata &lt;- data.frame(Value=rnorm(100))\n\n\nhistogram &lt;- ggplot(data=data, aes(x=Value, fill = categories)) +\n  geom_histogram(binwidth=0.5, fill=\"lightblue\", color=\"black\") +\n  labs(title=\"Histogram\", x=\"Value\", y=\"Frequency\") +\ntheme(plot.background = element_rect(color = \"black\", size = 1)) + \n   scale_fill_manual(values = c(\"lightblue\", \"lightgreen\", \"lightcoral\")) +\n  guides(fill = guide_legend(title = \"Categories\"))\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n # theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nhistogram\n\n\n\n################\n\n# Create a sample dataset\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\")\nvalues &lt;- c(30, 45, 60)\ndata &lt;- data.frame(Category=categories, Value=values)\n\n# Create a bar chart\n#barplot(values, names.arg=categories, main=\"Bar Chart\", horiz = TRUE, xlab=\"Category\", ylab=\"Value\", col=\"lightblue\")\n\nggplot(data=data, aes(x=Category, y =Value)) +\n  geom_bar(fill=\"navyblue\", color=\"black\", stat=\"identity\") +\n  labs(title=\"Vertical Bar Plot\", x=\"Category\", y=\"Value\") + \n  coord_flip()\n\n\n\nggplot(data=data, aes(x=Category, y=Value)) +\n  geom_bar(stat=\"identity\", fill=\"lightblue\") +\n  labs(title=\"Bar Chart\", x=\"Category\", y=\"Value\") \n\n\n\n################\n\n\n# Create a sample dataset\ncategories &lt;- c(\"Category A\", \"Category B\", \"Category C\")\nvalues &lt;- c(30, 45, 60)\ndata &lt;- data.frame(Category=categories, Value=values)\n\n# Create a pie chart\nggplot(data=data, aes(x=\"\", y=Value, fill=Category)) +\n  geom_bar(stat=\"identity\") +\n  coord_polar(theta=\"y\") +\n  labs(title=\"Pie Chart\")\n\n\n\n##################\n\n\n\ndata &lt;- data.frame(Group=rep(c(\"A\", \"B\", \"C\"), each=100),\n                   Value=c(rnorm(100), rnorm(100, mean=2), rnorm(100, mean=3)))\n\n# Create a box plot\nggplot(data=data, aes(x=Group, y=Value, fill=Group)) +\n  geom_boxplot() +\n  labs(title=\"Box Plot\", x=\"Group\", y=\"Value\")\n\n\n\n###################\n\n\n# Create a sample dataset\ndata &lt;- data.frame(X=rnorm(50), Y=rnorm(50))\n\n# Create a scatter plot\nggplot(data=data, aes(x=X, y=Y)) +\n  geom_point(shape=19, color=\"blue\") +\n  labs(title=\"Scatter Plot\", x=\"X-axis\", y=\"Y-axis\") +\n  theme(axis.text.y = element_text(angle = 45, hjust = 1))\n\n\n\n####################\n\n\nggsave(\"pie_chart.pdf\", plot = histogram, device = \"pdf\")\n\nSaving 7 x 5 in image\n\nggsave(\"pie_chart.jpg\", plot = histogram, device = \"jpeg\", dpi = 300)  \n\nSaving 7 x 5 in image\n\nlibrary(svglite)\nggsave(\"pie_chart.svg\", plot = histogram, device = \"svg\")\n\nSaving 7 x 5 in image\n\nggsave(\"pie_chart.tiff\", plot = histogram, device = \"tiff\")\n\nSaving 7 x 5 in image\n\nggsave(\"pie_chart.bmp\", plot = histogram, device = \"bmp\")\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "Assignment 4.html",
    "href": "Assignment 4.html",
    "title": "Hackathon",
    "section": "",
    "text": "library(ggplot2)\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Small Apples\", \"Medium Apples\", \"Large Apples\", \"Small Oranges\", \"Large Oranges\"),\n  Quantity = c(10, 15, 20, 8, 25),\n  Width = c(0.3, 0.5, 0.7, 0.3, 0.7)  # Specify the widths for each bar\n)\n\nchart1 &lt;- ggplot(sales_data, aes(x = Fruit, y = Quantity, width = Width)) +\n  geom_bar(stat = \"identity\", fill = \"coral\") +\n  labs(title = \"Sales for Fruits of Different Sizes\", x = \"Fruit\", y = \"Quantity Sold\") +\n  theme(text=element_text(size=12,  family=\"serif\"), plot.title = element_text(hjust = 0.5))\n  \nprint(chart1)\n\n\n\n\n\nlibrary(gridExtra)\ndata1 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(5000, 7000, 6500, 3000)\n)\n\ndata2 &lt;- data.frame(\n  Product = c(\"A\", \"B\", \"C\", \"D\"),\n  Revenue = c(2000, 5000, 6000, 1000)\n)\n\nstore1 &lt;- ggplot(data1, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"midnightblue\", alpha = 0.7) +\n  labs(title = \"Store 1: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nstore2 &lt;- ggplot(data2, aes(x = Product, y = Revenue)) +\n  geom_bar(stat = \"identity\", fill = \"seagreen4\", alpha = 0.7) +\n  labs(title = \"Store 2: Product Revenue\", x = \"Product Type\", y = \"Revenue (USD)\") +\n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\ncombined_chart &lt;- grid.arrange(store1, store2, ncol = 2)\n\n\n\n\n\nsales_data &lt;- data.frame(\n  Fruit = c(\"Apples\", \"Oranges\", \"Pears\", \"Kiwis\", \"Bananas\", \"Pineapples\", \"Peaches\"),\n  Quantity = c(10, 15, 20, 8, 25, 12, 18)\n)\n\nchart3 &lt;- ggplot(sales_data, aes(x = Quantity, y = Fruit)) +\n  geom_bar(stat = \"identity\", fill = \"darkslategray4\") +\n  labs(title = \"Sales for Different Fruits\", x = \"Quantity Sold\", y = \"Type of Fruit\") + \n  theme(text=element_text(size=12, family=\"serif\"), plot.title = element_text(hjust = 0.5))\n\nprint(chart3)\n\n\n\n\n\nhobbies &lt;- c(\"Baking\", \"Drawing\", \"Reading\")\ndata1 &lt;- c(20, 30, 15)\ndata2 &lt;- c(25, 15, 10)\ndata3 &lt;- c(15, 10, 13)\n\ndata_matrix &lt;- matrix(c(data1, data2, data3), nrow = length(hobbies), byrow = TRUE)\n\nbar_colors &lt;- c(\"firebrick\", \"navajowhite3\", \"darkolivegreen\")\nbar_labels &lt;- c(\"Yes\", \"No\", \"Maybe\")\n\nbarplot(data_matrix, beside = TRUE, col = bar_colors, names.arg = hobbies, main = \"Survey Reponses to Hobby Interests\", xlab = \"Hobby Categories\", ylab = \"Total Number of Reponses\", family=\"serif\")\n\nlegend(\"topright\", legend = bar_labels, fill = bar_colors)"
  }
]